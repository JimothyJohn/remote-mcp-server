AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Remote MCP Server - A Model Context Protocol server with AWS Lambda compatibility

Parameters:
  Environment:
    Type: String
    Default: staging
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
  
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues: [DEBUG, INFO, WARNING, ERROR]
    Description: Application log level
  
  StripeSecretKey:
    Type: String
    NoEcho: true
    Description: Stripe secret key for payment processing

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: python3.11
    Tracing: Active
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        ENVIRONMENT: !Ref Environment
        STRIPE_SECRET_KEY: !Ref StripeSecretKey
    LoggingConfig:
      LogFormat: JSON
      ApplicationLogLevel: INFO
      SystemLogLevel: WARN
  Api:
    TracingEnabled: true
    Auth:
      ApiKeyRequired: true
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
Resources:
  # API Gateway API Key and Usage Plan for subscription billing
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub "${AWS::StackName}-api-key"
      Description: API Key for Remote MCP Server subscription billing
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ServerlessRestApi
          StageName: Prod

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub "${AWS::StackName}-usage-plan"
      Description: Usage plan for Remote MCP Server subscription billing
      ApiStages:
        - ApiId: !Ref ServerlessRestApi
          Stage: Prod
      Throttle:
        BurstLimit: 500
        RateLimit: 100
      Quota:
        Limit: 10000
        Period: MONTH

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # DynamoDB table for subscription and usage tracking
  SubscriptionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-subscriptions"
      AttributeDefinitions:
        - AttributeName: api_key
          AttributeType: S
        - AttributeName: customer_id
          AttributeType: S
      KeySchema:
        - AttributeName: api_key
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CustomerIndex
          KeySchema:
            - AttributeName: customer_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          BillingMode: PAY_PER_REQUEST
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: remote-mcp-server
        - Key: Environment
          Value: !Ref Environment

  RemoteMCPServerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: app.lambda_handler
      Description: Remote MCP Server Lambda function with dual MCP/HTTP compatibility and subscription billing
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionTable
        - Statement:
          - Effect: Allow
            Action:
              - apigateway:GET
              - apigateway:POST
            Resource: 
              - !Sub "arn:aws:apigateway:${AWS::Region}::/apikeys/*"
              - !Sub "arn:aws:apigateway:${AWS::Region}::/usageplans/*"
      Tags:
        Project: remote-mcp-server
        Environment: !Ref Environment
      Events:
        RemoteMCPServer:
          Type: Api
          Properties:
            Path: /aegis
            Method: get
            Auth:
              ApiKeyRequired: true
        RemoteMCPServerPost:
          Type: Api
          Properties:
            Path: /aegis
            Method: post
            Auth:
              ApiKeyRequired: true
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: get
        # New endpoints for subscription management
        CreateSubscription:
          Type: Api
          Properties:
            Path: /subscription/create
            Method: post
        GetSubscription:
          Type: Api
          Properties:
            Path: /subscription/{api_key}
            Method: get
            Auth:
              ApiKeyRequired: true
        UpdateUsage:
          Type: Api
          Properties:
            Path: /subscription/usage
            Method: post
            Auth:
              ApiKeyRequired: true

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  RemoteMCPServerApi:
    Description: API Gateway endpoint URL for Prod stage for Remote MCP Server
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/aegis/"
  RemoteMCPServerFunction:
    Description: Remote MCP Server Lambda Function ARN
    Value: !GetAtt RemoteMCPServerFunction.Arn
  RemoteMCPServerFunctionIamRole:
    Description: Implicit IAM Role created for Remote MCP Server function
    Value: !GetAtt RemoteMCPServerFunctionRole.Arn
  ApiKey:
    Description: API Gateway API Key ID for subscription billing
    Value: !Ref ApiKey
  UsagePlan:
    Description: API Gateway Usage Plan ID
    Value: !Ref UsagePlan
  SubscriptionTable:
    Description: DynamoDB table for subscription management
    Value: !Ref SubscriptionTable
