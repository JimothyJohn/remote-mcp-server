[project]
name = "remote-mcp-server"
version = "1.0.0"
description = "A comprehensive Remote MCP Server with AWS Lambda compatibility, featuring dual HTTP API and MCP protocol support"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Nick Armenta", email = "nick@advin.io"},
]
maintainers = [
    {name = "Nick Armenta", email = "nick@advin.io"},
]
license = {text = "MIT"}
keywords = [
    "mcp", "model-context-protocol", "aws-lambda", "serverless", "ai", "assistant", 
    "api", "http", "json-rpc", "docker", "fastmcp", "anthropic"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Typing :: Typed",
]
dependencies = [
    "mcp[cli]>=1.11.0",
    "pydantic>=2.0.0",
    "boto3>=1.38.12",
    "requests>=2.32.3",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/JimothyJohn/remote-mcp-server"
Documentation = "https://github.com/JimothyJohn/remote-mcp-server/blob/main/docs/"
Repository = "https://github.com/JimothyJohn/remote-mcp-server.git"
Issues = "https://github.com/JimothyJohn/remote-mcp-server/issues"
Changelog = "https://github.com/JimothyJohn/remote-mcp-server/blob/main/CHANGELOG.md"
"Live Demo" = "https://rexlaqrt59.execute-api.us-east-1.amazonaws.com/Prod/"

[project.scripts]
"remote-mcp-server" = "remote_mcp_server.mcp_server:main"


[dependency-groups]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "pytest-xdist>=3.8.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "moto>=4.2.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
per-file-ignores = { "__init__.py" = ["F401"], "tests/*" = ["B011", "F401", "F811"] }

# Black configuration
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = ["examples/", "dist/", "build/"]

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "boto3.*",
    "botocore.*",
    "moto.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=remote_mcp_server --cov-report=term-missing --cov-report=html --cov-report=xml"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["remote_mcp_server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
